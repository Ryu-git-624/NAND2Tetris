// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    Not(in=zx, out=notzx);
    And(a=notzx, b=x[0], out=zx0);
    And(a=notzx, b=x[1], out=zx1);
    And(a=notzx, b=x[2], out=zx2);
    And(a=notzx, b=x[3], out=zx3);
    And(a=notzx, b=x[4], out=zx4);
    And(a=notzx, b=x[5], out=zx5);
    And(a=notzx, b=x[6], out=zx6);
    And(a=notzx, b=x[7], out=zx7);
    And(a=notzx, b=x[8], out=zx8);
    And(a=notzx, b=x[9], out=zx9);
    And(a=notzx, b=x[10], out=zx10);
    And(a=notzx, b=x[11], out=zx11);
    And(a=notzx, b=x[12], out=zx12);
    And(a=notzx, b=x[13], out=zx13);
    And(a=notzx, b=x[14], out=zx14);
    And(a=notzx, b=x[15], out=zx15);

    Xor(a=nx, b=zx0, out=nx0);
    Xor(a=nx, b=zx1, out=nx1);
    Xor(a=nx, b=zx2, out=nx2);
    Xor(a=nx, b=zx3, out=nx3);
    Xor(a=nx, b=zx4, out=nx4);
    Xor(a=nx, b=zx5, out=nx5);
    Xor(a=nx, b=zx6, out=nx6);
    Xor(a=nx, b=zx7, out=nx7);
    Xor(a=nx, b=zx8, out=nx8);
    Xor(a=nx, b=zx9, out=nx9);
    Xor(a=nx, b=zx10, out=nx10);
    Xor(a=nx, b=zx11, out=nx11);
    Xor(a=nx, b=zx12, out=nx12);
    Xor(a=nx, b=zx13, out=nx13);
    Xor(a=nx, b=zx14, out=nx14);
    Xor(a=nx, b=zx15, out=nx15);

    Not(in=zy, out=notzy);
    And(a=notzy, b=y[0], out=zy0);
    And(a=notzy, b=y[1], out=zy1);
    And(a=notzy, b=y[2], out=zy2);
    And(a=notzy, b=y[3], out=zy3);
    And(a=notzy, b=y[4], out=zy4);
    And(a=notzy, b=y[5], out=zy5);
    And(a=notzy, b=y[6], out=zy6);
    And(a=notzy, b=y[7], out=zy7);
    And(a=notzy, b=y[8], out=zy8);
    And(a=notzy, b=y[9], out=zy9);
    And(a=notzy, b=y[10], out=zy10);
    And(a=notzy, b=y[11], out=zy11);
    And(a=notzy, b=y[12], out=zy12);
    And(a=notzy, b=y[13], out=zy13);
    And(a=notzy, b=y[14], out=zy14);
    And(a=notzy, b=y[15], out=zy15);

    Xor(a=ny, b=zy0, out=ny0);
    Xor(a=ny, b=zy1, out=ny1);
    Xor(a=ny, b=zy2, out=ny2);
    Xor(a=ny, b=zy3, out=ny3);
    Xor(a=ny, b=zy4, out=ny4);
    Xor(a=ny, b=zy5, out=ny5);
    Xor(a=ny, b=zy6, out=ny6);
    Xor(a=ny, b=zy7, out=ny7);
    Xor(a=ny, b=zy8, out=ny8);
    Xor(a=ny, b=zy9, out=ny9);
    Xor(a=ny, b=zy10, out=ny10);
    Xor(a=ny, b=zy11, out=ny11);
    Xor(a=ny, b=zy12, out=ny12);
    Xor(a=ny, b=zy13, out=ny13);
    Xor(a=ny, b=zy14, out=ny14);
    Xor(a=ny, b=zy15, out=ny15);

    HalfAdder(a=nx0, b=ny0, sum=add0,carry=carry0);
    FullAdder(a=nx1, b=ny1, c=carry0, sum=add1,carry=carry1);
    FullAdder(a=nx2, b=ny2, c=carry1, sum=add2,carry=carry2);
    FullAdder(a=nx3, b=ny3, c=carry2, sum=add3,carry=carry3);
    FullAdder(a=nx4, b=ny4, c=carry3, sum=add4,carry=carry4);
    FullAdder(a=nx5, b=ny5, c=carry4, sum=add5,carry=carry5);
    FullAdder(a=nx6, b=ny6, c=carry5, sum=add6,carry=carry6);
    FullAdder(a=nx7, b=ny7, c=carry6, sum=add7,carry=carry7);
    FullAdder(a=nx8, b=ny8, c=carry7, sum=add8,carry=carry8);
    FullAdder(a=nx9, b=ny9, c=carry8, sum=add9,carry=carry9);
    FullAdder(a=nx10, b=ny10, c=carry9, sum=add10,carry=carry10);
    FullAdder(a=nx11, b=ny11, c=carry10, sum=add11,carry=carry11);
    FullAdder(a=nx12, b=ny12, c=carry11, sum=add12,carry=carry12);
    FullAdder(a=nx13, b=ny13, c=carry12, sum=add13,carry=carry13);
    FullAdder(a=nx14, b=ny14, c=carry13, sum=add14,carry=carry14);
    FullAdder(a=nx15, b=ny15, c=carry14, sum=add15,carry=carry15);

    And(a=nx0, b=ny0, out=and0);
    And(a=nx1, b=ny1, out=and1);
    And(a=nx2, b=ny2, out=and2);
    And(a=nx3, b=ny3, out=and3);
    And(a=nx4, b=ny4, out=and4);
    And(a=nx5, b=ny5, out=and5);
    And(a=nx6, b=ny6, out=and6);
    And(a=nx7, b=ny7, out=and7);
    And(a=nx8, b=ny8, out=and8);
    And(a=nx9, b=ny9, out=and9);
    And(a=nx10, b=ny10, out=and10);
    And(a=nx11, b=ny11, out=and11);
    And(a=nx12, b=ny12, out=and12);
    And(a=nx13, b=ny13, out=and13);
    And(a=nx14, b=ny14, out=and14);
    And(a=nx15, b=ny15, out=and15);

    Mux(a=and0, b=add0, sel=f, out=mux0);
    Mux(a=and1, b=add1, sel=f, out=mux1);
    Mux(a=and2, b=add2, sel=f, out=mux2);
    Mux(a=and3, b=add3, sel=f, out=mux3);
    Mux(a=and4, b=add4, sel=f, out=mux4);
    Mux(a=and5, b=add5, sel=f, out=mux5);
    Mux(a=and6, b=add6, sel=f, out=mux6);
    Mux(a=and7, b=add7, sel=f, out=mux7);
    Mux(a=and8, b=add8, sel=f, out=mux8);
    Mux(a=and9, b=add9, sel=f, out=mux9);
    Mux(a=and10, b=add10, sel=f, out=mux10);
    Mux(a=and11, b=add11, sel=f, out=mux11);
    Mux(a=and12, b=add12, sel=f, out=mux12);
    Mux(a=and13, b=add13, sel=f, out=mux13);
    Mux(a=and14, b=add14, sel=f, out=mux14);
    Mux(a=and15, b=add15, sel=f, out=mux15);

    Xor(a=no, b=mux0, out=out[0]);
    Xor(a=no, b=mux1, out=out[1]);
    Xor(a=no, b=mux2, out=out[2]);
    Xor(a=no, b=mux3, out=out[3]);
    Xor(a=no, b=mux4, out=out[4]);
    Xor(a=no, b=mux5, out=out[5]);
    Xor(a=no, b=mux6, out=out[6]);
    Xor(a=no, b=mux7, out=out[7]);
    Xor(a=no, b=mux8, out=out[8]);
    Xor(a=no, b=mux9, out=out[9]);
    Xor(a=no, b=mux10, out=out[10]);
    Xor(a=no, b=mux11, out=out[11]);
    Xor(a=no, b=mux12, out=out[12]);
    Xor(a=no, b=mux13, out=out[13]);
    Xor(a=no, b=mux14, out=out[14]);
    Xor(a=no, b=mux15, out=out[15]);

    Xor(a=no, b=mux0, out=xor0);
    Xor(a=no, b=mux1, out=xor1);
    Xor(a=no, b=mux2, out=xor2);
    Xor(a=no, b=mux3, out=xor3);
    Xor(a=no, b=mux4, out=xor4);
    Xor(a=no, b=mux5, out=xor5);
    Xor(a=no, b=mux6, out=xor6);
    Xor(a=no, b=mux7, out=xor7);
    Xor(a=no, b=mux8, out=xor8);
    Xor(a=no, b=mux9, out=xor9);
    Xor(a=no, b=mux10, out=xor10);
    Xor(a=no, b=mux11, out=xor11);
    Xor(a=no, b=mux12, out=xor12);
    Xor(a=no, b=mux13, out=xor13);
    Xor(a=no, b=mux14, out=xor14);
    Xor(a=no, b=mux15, out=xor15);

    Or(a=xor0, b=xor1, out=or1);
    Or(a=xor2, b=xor3, out=or3);
    Or(a=xor4, b=xor5, out=or5);
    Or(a=xor6, b=xor7, out=or7);
    Or(a=xor8, b=xor9, out=or9);
    Or(a=xor10, b=xor11, out=or11);
    Or(a=xor12, b=xor13, out=or13);
    Or(a=xor14, b=xor15, out=or15);
    Or(a=or1, b=or3, out=orfirst);
    Or(a=or5, b=or7, out=orsecond);
    Or(a=xor9, b=xor11, out=orthird);
    Or(a=xor13, b=xor15, out=orfourth);
    Or(a=orfirst, b=orsecond, out=last1);
    Or(a=orthird, b=orfourth, out=last2);
    Or(a=last1, b=last2, out=orzr);
    Not(in=orzr, out=zr);

    And(a=xor15, b=xor15, out=ng);
    //// Replace this comment with your code.
}